if not getgenv().Config then
getgenv().Config = {
    SelectUserNameTradePet = "txD7CnpxwF", -- Tên Người Dùng Cần Giao Dịch Pet
}
end
PetsToTrade = getgenv().PetsToTrade
if not PetsToTrade then
   PetsToTrade = {"Griffin", "Golden Goose", "Red Fox",
}
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local TAFSERVICE = {}

local function unequipCurrentTool()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then
        hum:UnequipTools()  -- moves equipped tool back to Backpack
    end
end

function TAFSERVICE.a()
    local UserName = getgenv().Config.SelectUserNameTradePet
    if UserName == "" then
        return false
    end
    local TargetPlayer = Players:FindFirstChild(UserName)
    if not TargetPlayer then
        return false
    end
    return true
end
-- Safer literal substring check
local function containsLiteral(hay, needle)
    return string.find(hay, needle, 1, true) ~= nil
end

function TAFSERVICE.b()
    unequipCurrentTool()
    local Backpack = LocalPlayer:FindFirstChild("Backpack") or LocalPlayer:WaitForChild("Backpack", 5)
    if not Backpack then return false end

    for _, PetName in ipairs(PetsToTrade) do
        for _, v in ipairs(Backpack:GetChildren()) do
            if v:IsA("Tool") and containsLiteral(v.Name, PetName) then
                return v
            end
        end
    end
    return false
end

function TAFSERVICE.c(pos)
    local char = LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not (hrp and typeof(pos) == "Vector3") then return false end
    hrp.CFrame = CFrame.new(pos)
    return true
end

function TAFSERVICE.c1(petName)
    local char = LocalPlayer.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    if not hum then return false end

    local equipped = char:FindFirstChildOfClass("Tool")
    if equipped and not containsLiteral(equipped.Name, petName) then
        hum:UnequipTools()
        task.wait(0.1)
    end

    local backpack = LocalPlayer:FindFirstChild("Backpack") or LocalPlayer:WaitForChild("Backpack", 5)
    if not backpack then return false end
    local tool = backpack:FindFirstChild(tostring(petName))
    if not tool then return false end

    -- Optional remote, avoid infinite yield:
    local rs = game:GetService("ReplicatedStorage")
    local ge = rs:FindFirstChild("GameEvents")
    local fav = ge and ge:FindFirstChild("Favorite_Item")
    if tool:GetAttribute("d") == true and fav then
        fav:FireServer(tool)
    end

    hum:EquipTool(tool)
    task.wait(0.1)
    return true
end

local function findAnyPromptUnder(instance)
    if not instance then return nil end
    -- direct child
    local p = instance:FindFirstChildOfClass("ProximityPrompt")
    if p then return p end
    -- deep search
    return instance:FindFirstChild("ProximityPrompt", true)
end

function TAFSERVICE.d()
    local pet = TAFSERVICE.b()
    local okUser = TAFSERVICE.a()
    if not (okUser and pet) then
        warn("Please set a valid username and have a pet in Backpack.")
        return false
    end

    if not TAFSERVICE.c1(pet.Name) then
        warn("Could not equip pet:", pet.Name)
        return false
    end

    local target = Players:FindFirstChild(getgenv().Config.SelectUserNameTradePet)
    if not (target and target.Character) then
        warn("Can't find target player/character.")
        return false
    end
    local thrp = target.Character:FindFirstChild("HumanoidRootPart")
    local lchar = LocalPlayer.Character
    local lhrp  = lchar and lchar:FindFirstChild("HumanoidRootPart")
    if not (thrp and lhrp) then return false end

    if not TAFSERVICE.c(thrp.Position) then return false end
    task.wait(0.1)

    local prompt = findAnyPromptUnder(thrp) or findAnyPromptUnder(target.Character:FindFirstChild("Head"))
    if prompt and (lhrp.Position - thrp.Position).Magnitude < 10 then
        if typeof(fireproximityprompt) == "function" then
            pcall(fireproximityprompt, prompt)
        else
            warn("fireproximityprompt is not available.")
            return false
        end
        return true
    end
    return false
end

function TAFSERVICE.RunService()
    while true do
        local ok = TAFSERVICE.d()
        if ok then print("[Trade] Prompt fired") end
        task.wait(1)
    end
end


TAFSERVICE.RunService()
