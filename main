-- Ensure the game is fully loaded before running anything if not game:IsLoaded() then repeat game.Loaded:Wait() until game:IsLoaded() end

local type = "Gift"
local TeleportService = game:GetService("TeleportService")
local PlaceId         = game.PlaceId
local JobId           = game.JobId

local urls

-- List of module URLs to load
if type == "Recieve" then
    urls = {
        "https://raw.githubusercontent.com/Duyy-2006/Grow-A-Garden-Gift/refs/heads/main/telechar",
        "https://raw.githubusercontent.com/Duyy-2006/Grow-A-Garden-Gift/refs/heads/main/change",
    }
else if type == "Gift" then
    urls = {
        "https://raw.githubusercontent.com/Duyy-2006/Grow-A-Garden-Gift/refs/heads/main/change_recieve",
        "https://raw.githubusercontent.com/Duyy-2006/Grow-A-Garden-Gift/refs/heads/main/Recieve"
    }

for _, url in ipairs(urls) do
    local ok, chunkOrErr = pcall(game.HttpGet, game, url)
    if not ok then
        warn(("Failed to download %q: %s – rejoining..."):format(url, chunkOrErr))
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId)
        return
    end

    local fn, loadErr = loadstring(chunkOrErr)
    if not fn then
        warn(("Error compiling %q: %s – rejoining..."):format(url, loadErr))
        TeleportService:TeleportToPlaceInstance(PlaceId, JobId)
        return
    end

    -- Run each module in its own thread so a blocking loop inside one
    -- won't stop the others from loading.
    task.spawn(function()
        local success, runErr = pcall(fn)
        if not success then
            warn(("Error running %q: %s – rejoining..."):format(url, runErr))
            TeleportService:TeleportToPlaceInstance(PlaceId, JobId)
        end
    end)
end
